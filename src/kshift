#!/usr/bin/env python

import argparse
from os import path,system,makedirs 
from re import search

import conf
import theme
import utils

from string import Template

themes = []
themes_dic = {}

c = conf.config()

# This loop goes through the data from the yaml file
# it iterates over the attributes for theme, currently colorscheme, wallpaper, and color
# it then sets a local var to these items and uses it to make a Theme var
# The theme var is stored in an array and a dictionary
for name in c.data["themes"]:
    loc_vars = locals()
    for att in theme.Theme.attributes:
        try:
            loc_vars.__setitem__(att,c.data["themes"][name][att])
        except (KeyError, TypeError):
            loc_vars.__setitem__(att,None)

    if type(time).__name__ != 'list':
        time = [time]

    for ti in time:
        t = theme.Theme(name, colorscheme, icontheme, wallpaper, desktoptheme, command, ti, enabled )

        themes_dic[name] = t
        themes.append(t)

#themes = sorted(themes)
themes = sorted(themes, reverse=True)

###################################
# IO Functions
###################################

# Writes the timers/services for each timed theme
def write_timer():

    active_theme_list = []

    for theme in themes:
        if theme.time:
            active_theme_list.append(theme)
        else:
            system(f"rm -f {c.systemd_loc}kshift-{theme.name}*")

    for theme in active_theme_list:

        theme_service_str =" ".join([f'kshift-{x.name}.service' for x in active_theme_list if x.name is not theme.name ]) 

        # write theme timer
        old_theme_time = ""
        if path.exists(f"{c.systemd_loc}kshift-{theme.name}.timer"):
            file = open(f"{c.systemd_loc}kshift-{theme.name}.timer","r")
            r = search("OnCalendar=(.*)\n", file.read())
            if r:
                old_theme_time = r.group(1)
            file.close()

        if old_theme_time != theme.time:
            file = open(f"{c.systemd_loc}kshift-{theme.name}.timer","w")
            template = Template(open(f'{c.config_loc_base}/templates/template.timer').read());

            description = f'Kshift timer for theme {theme.name}'
            after = f'After={theme_service_str}'
            timer_action = f'OnCalendar={theme.time}\nPersistent=true'

            subs = { "description": description, "unit_options": after, "timer_action":timer_action }
            
            file.write(template.substitute(subs))
            file.close()

            # write theme service
            file = open(c.systemd_loc+"kshift-"+theme.name+".service","w")
            template = Template(open(f'{c.config_loc_base}/templates/template.service').read());

            exec_name = path.basename(__file__)

            description = f'Kshift service for theme {theme.name}'
            command = f'{c.home}/.local/bin/{exec_name} -t {theme.name}'

            subs = { "description":description, "working_dir": c.config_loc_base, "command":command }

            file.write(template.substitute(subs))
            file.close()

        system("systemctl --user enable kshift-"+theme.name+".timer")
        system("systemctl --user restart kshift-"+theme.name+".timer")


    # write startup timer
    if not path.exists(f"{c.systemd_loc}kshift-startup.timer"):
        file = open(c.systemd_loc+"kshift-startup.timer","w")

        template = Template(open(f'{c.config_loc_base}/templates/template.timer').read());

        description = f'Kshift startup timer'
        timer_action = f'OnStartupSec=5'

        subs = { "description": description, "unit_options" : "", "timer_action":timer_action }
        
        file.write(template.substitute(subs))
        file.close()

    # write startup service
    if not path.exists(f"{c.systemd_loc}kshift-startup.service"):
        file = open(f"{c.systemd_loc}kshift-startup.service","w")
        template = Template(open(f'{c.config_loc_base}/templates/template.service').read());

        exec_name = path.basename(__file__)

        description = f'Kshift startup service'
        command = f'{c.home}/.local/bin/{exec_name}'

        subs = { "description":description, "working_dir": c.config_loc_base ,"command":command }

        file.write(template.substitute(subs))
        file.close()

    system("systemctl --user daemon-reload")
    system("systemctl --user enable kshift-startup.timer")


# Installs kshift
# Copies executable, creates config file, utilizes the write timer func, and enables the timer
def install():

    exec_name = path.basename(__file__)

    print("Linking Kshift to .local/bin...")
    makedirs(f"{c.home}/.local/bin/", exist_ok=True)

    system(f"ln -s -f {__file__} {c.home}/.local/bin/{exec_name}")

    var_loc = c.config_loc
    # Make config dir, possibly read config env
    if not path.exists(c.config_loc_base):
        makedirs(c.config_loc_base)

    if not path.exists(f"{c.config_loc_base}/templates"):
        system(f'cp -r templates {c.config_loc_base}')

    if not path.exists(var_loc):
        print(f"Copying 'defaults.yml' to {var_loc}...")
        system(f"cp defaults.yml {var_loc}")

    makedirs(c.systemd_loc, exist_ok=True)

    print("Writing theme timers and services...")

    write_timer()

    print("Enabling services...")


# Removes Kshift timer
def remove_self():

    print("Removing kshift timers and services...")

    system(f"rm {c.systemd_loc}kshift-*")

    system("systemctl --user daemon-reload")

###################################
# Arg parsing
###################################

parser = argparse.ArgumentParser(description="KDE Theme Switching")

parser.add_argument("-w", "--wallpaper", help="Sets the current wallpaper", type=str, required=False)
parser.add_argument("-c","--colorscheme", type=str,help="Sets the colorscheme", required=False)
parser.add_argument("-i","--icontheme", type=str,help="Sets the icon theme", required=False)
parser.add_argument("-t", "--theme", help="Sets the kshift theme", type=str, choices=list(c.data["themes"].keys()), required=False)
parser.add_argument("-dk", "--desktop_theme", help="Sets the KDE desktop theme", type=str, required=False)


# These cannot be called together
install_g = parser.add_mutually_exclusive_group(required=False)
install_g.add_argument("--install", help="Installs Kshift", action="store_true")
install_g.add_argument("--remove", help="Removes Kshift", action="store_true")
install_g.add_argument("-s", "--status", help="Displays kshift timing information", action='store_true')


args = parser.parse_args()

if args.status:

    c.status()

elif args.install:

    answer = input("Are you sure you want to install Kshift? [y/n]: ")
    if answer == "Y" or answer == "y" or answer == "yes":
        install()

elif args.remove:

    answer = input("Are you sure you want to remove Kshift? [y/n]: ")
    if answer == "Y" or answer == "y" or answer == "yes":
        remove_self()

else:

    if args.theme:
        themes_dic[args.theme].kshift()

    elif args.colorscheme or args.icontheme or args.wallpaper or args.desktop_theme:
        theme.Theme("tmp", args.colorscheme, args.icontheme, args.wallpaper, args.desktop_theme, None, None, None).kshift()

    else:

        theme_to_be = None

        # if the time is >= the theme time, it should be that one to switch
        # if none is greater, then do nothing.
        for theme in themes:

            if theme.time is None:
                break
            elif c.today >= utils.systemd_to_datetime(theme.time, c.today):
                theme_to_be = theme
                break

        if theme_to_be:
            theme_to_be.kshift()

    write_timer()
